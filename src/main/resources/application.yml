server:
  port: 8787
mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
spring:
  shardingsphere:
    enabled: true
    # 多数据源
    datasource:
      names: shortlink0,shortlink1,quartz
      shortlink0:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/shortlink0?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&serverTimezone=GMT%2B8
        username: root
        password: 1234
        driver-class-name: com.mysql.cj.jdbc.Driver
      shortlink1:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/shortlink1?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&serverTimezone=GMT%2B8
        username: root
        password: 1234
        driver-class-name: com.mysql.cj.jdbc.Driver
      quartz:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/quartz?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&serverTimezone=GMT%2B8
        username: root
        password: 1234
        driver-class-name: com.mysql.cj.jdbc.Driver
    # 分片设置
    sharding:
      tables:
        t_url_mapping:
          database-strategy:
            standard:
              sharding-column: short_url
              precise-algorithm-class-name: com.dawn.shortlink.domain.strategy.MyDatabasePreciseAlgorithm
          table-strategy:
            standard:
              sharding-column: short_url
              precise-algorithm-class-name: com.dawn.shortlink.domain.strategy.MyTablePreciseAlgorithm
          actualDataNodes: shortlink$->{0..1}.t_url_mapping$->{0..1}
      default-data-source-name: quartz # 默认数据源给 quartz 来用
    props:
      sql:
        show: false

  #Redis 相关配置
  redis:
    port: 6379
    host: localhost
    database: 0
    password:
    timeout: 5000ms
    jedis:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0

# Quartz 相关配置
  quartz:
    #相关属性配置
    properties:
      org:
        quartz:
          scheduler:
            #调度器实例名称
            instanceName: clusteredScheduler
            #调度器实例编号自动生成
            instanceId: AUTO
          jobStore:
            #持久化方式配置, 新版的配置类不一样
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            #持久化方式配置数据驱动，MySQL数据库
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            #quartz相关数据表前缀名
            tablePrefix: QRTZ_
            #开启分布式部署
            isClustered: true
            #分布式节点有效性检查时间间隔，单位：毫秒
            clusterCheckinInterval: 10000
            #配置是否使用
            useProperties: false
          threadPool:
            #线程池实现类
            class: org.quartz.simpl.SimpleThreadPool
            #执行最大并发线程数量
            threadCount: 10
            #线程优先级
            threadPriority: 5
            #配置是否启动自动加载数据库内的定时任务，默认true
            threadsInheritContextClassLoaderOfInitializingThread: true
    #数据库方式
    job-store-type: jdbc
    #初始化表结构, 用于初始化数据, 第一次启动时为 always, 后改为 never
    jdbc:
      initialize-schema: never
